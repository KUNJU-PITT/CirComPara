'''
Perform analyses on the circRNA results collected by each circRNA detection program.
Currently supported/implemented for:
    * CIRCexplorer
    * CIRI
    * findcirc
    * testrealign (segemehl)
'''

import os
Import('*')

try:
    env = env.Clone()
    GTF = circrna_analyze_GTF
    CSVS = circrna_analyze_csvs

except NameError:
    vars = Variables('vars.py')
    vars.Add('CSVS', '''A comma-separated list with the four circRNA result collection csv'''\
             ''' files. The order must be CIRCexplorer,ciri,find_circ,segecirc ''', 
             '''CIRCexplorer_compared.csv,ciri_compared.csv,find_circ_compared.csv,'''\
             '''segecirc_compared.csv''')
    vars.Add('GTF', 'The annotation file in GTF format to be intersected', 'merged.gtf')
    env = Environment(ENV=os.environ, SHELL = '/bin/bash',
                      variables=vars)
    Help(vars.GenerateHelpText(env))
    unknown = vars.UnknownVariables()
    if unknown:
        print "Run sample: unknown variables", unknown.keys()
        Exit(1)

    csvs = env['CSVS'].rstrip().split(',')
    circrna_analyze_circexplorer = csvs[0]
    circrna_analyze_ciri         = csvs[1]
    circrna_analyze_findcirc     = csvs[2]
    circrna_analyze_segecirc     = csvs[3]
    GTF = env['GTF']

methods = {'CIRCEXPLORER': 'circexplorer',
	   'CIRI': 'ciri',
	   'FINDCIRC': 'findcirc',
	   'TESTREALIGN': 'segecirc'}

## collect circRNAs in a single GTF annotation file
circ_gtf_sources = []
circ_gtf_cmd = '''{ '''
for k,v in CSVS.iteritems():
    if v:
	circ_gtf_sources.append(v)
        circ_gtf_cmd = circ_gtf_cmd + '''convert_circrna_collect_tables.py -p ''' + methods[k] +\
		       ''' ''' + v[0].path + ''' ; '''
circ_gtf_cmd = circ_gtf_cmd + '''} | sort -k1,1 -k4,4n > ${TARGETS[0]}'''

circ_gtf_target = 'circrnas.gtf'
circ_gtf = env.Command(circ_gtf_target, circ_gtf_sources, circ_gtf_cmd)

## intersect circRNAs with gene annotation: keep only 'exon' features from GTF
circ_gene_combine_cmd = '''bedtools intersect -wa -wb -a ${SOURCES[0]} '''\
                        '''-b <( grep -w exon ${SOURCES[1]} ) -s -loj'''\
                        ''' | gzip -c > $TARGET'''
circ_gene_combine_sources = [circ_gtf, GTF]
circ_gene_combine_target = 'combined_circrnas.gtf.gz'
circ_gene_combine = env.Command(circ_gene_combine_target, circ_gene_combine_sources, 
                                circ_gene_combine_cmd)

env['JUNK2_HOME'] = env['ENV']['JUNK2_HOME']
circrnas_analysis_cmd = '''Rscript -e 'results.dir <- "$TARGET.dir"; '''\
                        '''circrnas.gtf.file <- "${SOURCES[0].abspath}"; '''\
                        '''combined_gtf_file <- "${SOURCES[1].abspath}"; '''\
                        '''meta_file <- "${SOURCES[2].abspath}"; '''\
                        '''gene_meta_file <- "${SOURCES[3].abspath}"; '''\
                        '''gene_fpkm_file <- "${SOURCES[4].abspath}"; '''\
                        '''knitr::knit2html("$JUNK2_HOME/src/circRNAs_analysis.Rmd", '''\
                        '''output = "$TARGET", force_v1 = T)' '''

circrnas_analysis_targets = "circrnas_analysis/circRNAs_analysis.html"
circrnas_analysis_sources = [os.path.join(Dir("#").abspath, i) for i in [
                            os.path.join("circRNA_collection", "circrnas.gtf"), 
                            os.path.join("circRNA_collection", "combined_circrnas.gtf.gz"),
                            "meta.csv",
                            os.path.join("cuffdiff", "read_groups.info"),
                            os.path.join("cuffdiff", "genes.read_group_tracking")]]
circrnas_analysis = env.Command(circrnas_analysis_targets, 
                                circrnas_analysis_sources, 
                                circrnas_analysis_cmd)

Return('circ_gene_combine circ_gtf')
