import os, csv, itertools, collections, re
from collections import defaultdict

def SymLink(target, source, env):
    '''Define Action to create symlinks'''
    os.symlink(os.path.abspath(str(source[0])), os.path.abspath(str(target[0])))

## GET PROGRAM ARGUMENTS
vars = Variables('vars.py')
vars.Add('META', 'The metadata table file where you specify the project samples, etc.', 'meta.csv')
vars.Add('PREPROCESSOR', '', 'trimmomatic')
vars.Add('ANNOTATION', '', '')
vars.Add('GENOME_FASTA', '', '')
vars.Add('GENOME_INDEX', '', '')
vars.Add('MAPPER', 'The aligner to map reads to the genome', 'segemehl')
vars.Add('CPUS','The number of cores to be used for parallel tool (a.i. mapper)','1')
env = Environment(ENV=os.environ,
                  variables=vars)
Help(vars.GenerateHelpText(env))

SCONSCRIPT_HOME = os.path.join(env['ENV']['JUNK2_HOME'], 'src')

## READ META FILE AND MAKE SAMPLE DIRECTORIES
samples_dir = 'samples'
Execute(Mkdir(samples_dir))

samples     = defaultdict(list)
adapters    = defaultdict(list)
conditions  = defaultdict(set)
with open(env['META']) as csvfile:
    reader = csv.DictReader(csvfile)
    for row in reader:
        samples[row['sample']].append(os.path.abspath(row['file']))
        adapters[row['sample']].append(row['adapter'])
        conditions[row['condition']].add(row['sample'])
        Execute(Mkdir(os.path.join(samples_dir, row['sample'])))

## PROCESS SAMPLES
runs = []
for sample in sorted(samples.keys()):
    raw_reads = samples[sample]
    sample_dir = os.path.join(samples_dir, sample)
    run_sample = SConscript(os.path.join(sample_dir, 'junk2_run_sample'), 
                            src_dir = SCONSCRIPT_HOME, 
                            variant_dir = sample_dir, duplicate = 0,
                            exports = 'env raw_reads')
    runs.append(run_sample)

## MERGE SAMPLE TRANSCRIPTOMES
def flatten(l):
    for el in l:
        if isinstance(el, collections.Iterable) and not isinstance(el, basestring):
            for sub in flatten(el):
                yield sub
        else:
            yield el

def get_matching_nodes(nodelist, rexpression):
    files = []
    for node in flatten(nodelist):
        if re.match(rexpression, node.path):
            files.append(node)
    return files

transcripts_gtf_files = get_matching_nodes(runs, '.*transcripts\.gtf')

cuffmerge_dir = 'cuffmerge'
#make_cuffmerge_dir = env.Command(Dir(cuffmerge_dir), [], Mkdir('$TARGET'))
cuffmerge = SConscript(os.path.join(cuffmerge_dir, 'junk2_cuffmerge'),
                       src_dir = SCONSCRIPT_HOME,
                       variant_dir = cuffmerge_dir, duplicate = 0,
                       exports = 'env transcripts_gtf_files')

## RETRIEVE TRANSCRIPT SEQUENCES
transcript_sequences_annotation = cuffmerge
transcript_sequences_genome = env['GENOME_FASTA']
transcript_sequences_dir = 'transcript_sequences'
#make_transcript_sequences_dir = env.Command(Dir(transcript_sequences_dir), [], Mkdir('$TARGET'))
transcript_sequences = SConscript(os.path.join(transcript_sequences_dir, 'junk2_transcript_fastas'), 
                                  src_dir = SCONSCRIPT_HOME,
                                  variant_dir = transcript_sequences_dir, duplicate = 0,
                                  exports = 'env transcript_sequences_annotation transcript_sequences_genome')

## QUANTIFY EXPRESSION WITH MERGED ANNOTATION
cuffquant_annotation = cuffmerge
alignments = get_matching_nodes(runs, '.*mappings.*\.bam')

cuffquant_dir = 'cuffquant'
#make_cuffquant_dir = env.Command(Dir(cuffquant_dir), [], Mkdir('$TARGET'))
cuffquant = SConscript(os.path.join(cuffquant_dir, 'junk2_cuffquant'),
                       src_dir = SCONSCRIPT_HOME,
                       variant_dir = cuffquant_dir, duplicate = 0,
                       exports = 'env alignments cuffquant_annotation')

Depends(cuffquant, [cuffmerge, alignments])

## COMPUTE NORMALIZED EXPRESSION: CUFFNORM
# TODO

## COMPUTE DIFFERENTIAL EXPRESSION: CUFFDIFF
cuffdiff_annotation = cuffmerge
cuffdiff_quantities = get_matching_nodes(cuffquant, '.*\.cxb')
cuffdiff_dir = 'cuffdiff'
#make_cuffdiff_dir = env.Command(Dir(cuffdiff_dir), [], Mkdir('$TARGET'))
cuffdiff = SConscript(os.path.join(cuffdiff_dir, 'junk2_cuffdiff'),
                      src_dir = SCONSCRIPT_HOME,
                      variant_dir = cuffdiff_dir, duplicate = 0,
                      exports = 'env conditions cuffdiff_annotation cuffdiff_quantities get_matching_nodes')

Depends(cuffdiff, cuffquant)

## COMPUTE DIFFERENTIAL EXPRESSION: DESEQ
deseq_annotation = cuffmerge
deseq_alignments = get_matching_nodes(runs, '.*mappings.*\.bam')
metafile = File(env['META']).abspath
deseq_dir = 'deseq'
deseq = SConscript(os.path.join(deseq_dir, 'junk2_DESeq'),
                   src_dir = SCONSCRIPT_HOME,
                   variant_dir = deseq_dir, duplicate = 0,
                   exports = 'env deseq_annotation deseq_alignments metafile')
Depends(deseq, [cuffmerge, alignments])

