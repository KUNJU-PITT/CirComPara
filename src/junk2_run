import os, csv, itertools
from collections import defaultdict

def SymLink(target, source, env):
    '''Define Action to create symlinks'''
    os.symlink(os.path.abspath(str(source[0])), os.path.abspath(str(target[0])))

## GET PROGRAM ARGUMENTS
vars = Variables('vars.py')
vars.Add('META', 'The metadata table file where you specify the project samples, etc.', 'meta.csv')
vars.Add('PREPROCESSOR', '', 'trimmomatic')
vars.Add('ANNOTATION', '', '')
vars.Add('GENOME_FASTA', '', '')
vars.Add('GENOME_INDEX', '', '')
vars.Add('MAPPER', 'The aligner to map reads to the genome', 'segemehl')
env = Environment(ENV=os.environ,
                  variables=vars)
Help(vars.GenerateHelpText(env))

SCONSCRIPT_HOME = os.path.join(env['ENV']['JUNK2_HOME'], 'src')

## READ META FILE AND MAKE SAMPLE DIRECTORIES
samples_dir = 'samples'
Execute(Mkdir(samples_dir))

samples     = defaultdict(list)
adapters    = defaultdict(list)
conditions  = defaultdict(set)
with open(env['META']) as csvfile:
    reader = csv.DictReader(csvfile)
    for row in reader:
        samples[row['sample']].append(os.path.abspath(row['file']))
        adapters[row['sample']].append(row['adapter'])
        conditions[row['condition']].add(row['sample'])
        Execute(Mkdir(os.path.join(samples_dir, row['sample'])))

## PROCESS SAMPLES
runs = []
for sample in sorted(samples.keys()):
    raw_reads = samples[sample]
    sample_dir = os.path.join(samples_dir, sample)
    run_sample = SConscript(os.path.join(sample_dir, 'junk2_run_sample'), 
                            src_dir = SCONSCRIPT_HOME, 
                            variant_dir = sample_dir, duplicate = 0,
                            exports = 'env raw_reads')
    runs.append(run_sample)

## MERGE SAMPLE TRANSCRIPTOMES
transcripts_gtf_files = itertools.chain(*runs)

cuffmerge_dir = 'cuffmerge'
make_cuffmerge_dir = env.Command(Dir(cuffmerge_dir), [], Mkdir('$TARGET'))
cuffmerge = SConscript(os.path.join(cuffmerge_dir, 'junk2_cuffmerge'),
                       src_dir = SCONSCRIPT_HOME,
                       variant_dir = cuffmerge_dir, duplicate = 0,
                       exports = 'env transcripts_gtf_files')

