'''
This script functions as a dispatcher to the desired gene expression analysis methods.
It sets the necessary variables and launch the expression analyses.
Currently it performs:
 * circular RNAs detection via segemehl/testrealign (junk2_circrna);
 * gene expression estimation via HTSeq-count (junk2_htseq_count);
 * gene/transcript expression estimation and detection via Cufflinks (junk2_cufflinks).

Software requirements inherited from the called SConscripts:
 #* junk2_circrna
 * junk2_htseq_count
 * junk2_cufflinks

Variables to export when calling from a SConscript:
 * expression_cpus
 #* expression_genome_fasta
 * expression_annotation
 * mapping_file
 * sample_name

'''

import os

Import('*')

try:
    CPUS = expression_cpus
    GENOME_FASTA = expression_genome_fasta
    ANNOTATION = expression_annotation
    ALIGNMENTS = mapping_file
    SAMPLE = sample_name
except NameError:
    varfile = ARGUMENTS.get('VARS', 'vars.py')
    vars = Variables(varfile)
    vars.Add('CPUS', 'Set number of CPUs', '4')
    #vars.Add('GENOME_FASTA', 'The FASTA file with the reference genome', 'genome.fa') 
    vars.Add('ANNOTATION', 'The GFF/GTF file with gene annotation (e.g. from Ensembl)', 'exons.gtf') 
    vars.Add('ALIGNMENTS', 'The read alignment file in SAM/BAM format', 'sample.bam')
    vars.Add('SAMPLE', 'The sample name', 'sample')

    env = Environment(variables = vars,
                      ENV = os.environ)
    Help(vars.GenerateHelpText(env))
    unknown = vars.UnknownVariables()
    if unknown:
        print "Unknown variables:", unknown.keys()
        Exit(1)

    CPUS         = env['CPUS']
    #GENOME_FASTA = env['GENOME_FASTA']
    ANNOTATION   = env['ANNOTATION']
    ALIGNMENTS   = env['ALIGNMENTS']
    SAMPLE       = env['SAMPLE']

expression_results = []
SRC_DIR = os.path.join(env['ENV']['JUNK2_HOME'], 'src')

mapping_file = ALIGNMENTS
sample_name  = SAMPLE

#segemehlcirc_cpus         = CPUS
#segemehlcirc_genome_fasta = GENOME_FASTA
#circrna_dir = 'circrna'
#circrna = SConscript(os.path.join(circrna_dir, 'junk2_circrna'), 
#                     variant_dir = circrna_dir, src_dir = SRC_DIR, 
#                     duplicate = 0, exports = 'env mapping_file sample_name segemehlcirc_cpus segemehlcirc_genome_fasta')
#
#expression_results.append(circrna)

htseq_count_dir = 'htseq'
cufflinks_dir = 'cufflinks'

if not ANNOTATION == '':

    ## RUN HTSEQ-COUNT
    htseq_count_annotation = ANNOTATION
    htseq_count_cpus = CPUS
    htseq = SConscript(os.path.join(htseq_count_dir, 'junk2_htseq_count'), 
                       variant_dir = htseq_count_dir, src_dir = SRC_DIR, 
                       duplicate = 0, exports = 'env mapping_file sample_name htseq_count_annotation htseq_count_cpus')
    expression_results.append(htseq)

    ## RUN CUFFLINKS
    cufflinks_annotation = ANNOTATION
    cufflinks_cpus = CPUS
    cufflinks = SConscript(os.path.join(cufflinks_dir, 'junk2_cufflinks'),
                           variant_dir = cufflinks_dir, src_dir = SRC_DIR, 
                           duplicate = 0, exports = 'env mapping_file sample_name cufflinks_annotation cufflinks_cpus')
    expression_results.append(cufflinks)

#Clean('.', circrna_dir)
Clean('.', htseq_count_dir)
Clean('.', cufflinks_dir)

Return('expression_results')
