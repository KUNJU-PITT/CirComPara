'''
This SConscript performs quality selection of RNA-seq FASTQ reads.

Required variables to export when calling from a SConscript:
 * env
 * preprocess_cpus
 * preprocess_preprocessor
 * preprocess_adapter_file
 * preprocess_raw_reads

'''
import os, itertools

Import('*')

try:
    env = env
    CPUS         = preprocess_cpus
    PREPROCESSOR = preprocess_preprocessor
    ADAPTER_FILE = preprocess_adapter_file
    READS        = preprocess_raw_reads
except NameError:
    varfile = ARGUMENTS.get('VARS', 'vars.py')
    vars = Variables(varfile)
    vars.Add('CPUS', 'Set number of CPUs', '4')
    vars.Add('PREPROCESSOR', 'The preprocessing method', 'trimmomatic')
    vars.Add('ADAPTER_FILE', 'FASTA file full path of the adapter sequence', '')
    vars.Add('READS', 'RNA-seq reads. Comma separated list if paired-end', 'reads.fa')
    
    env = Environment(variables = vars,
                      ENV = os.environ)
    Help(vars.GenerateHelpText(env))
    unknown = vars.UnknownVariables()
    if unknown:
        print "Unknown variables:", unknown.keys()
        Exit(1)

    CPUS = env['CPUS']
    PREPROCESSOR = env['PREPROCESSOR']
    ADAPTER_FILE = env['ADAPTER_FILE']
    READS = env['READS'].split(',')

SRC_DIR = os.path.join(env['ENV']['JUNK2_HOME'], 'src')

preprocess_dir = 'preprocess'
preprocessings = []
preprocessing_stats = []
if env['PREPROCESSOR'].lower()=='trimmomatic':

    trimmomatic_reads = [File(f).abspath for f in READS]
    trimmomatic_cpus = CPUS
    trimmomatic_adapter_file = ADAPTER_FILE
    trimmomatic_extra_params = '' #env['TRIMMOMATIC_PARAMS']

    preps = SConscript(os.path.join(preprocess_dir, 'junk2_trimmomatic'),
                       src_dir = SRC_DIR, 
                       variant_dir = preprocess_dir, duplicate = 0, 
                       exports = 'env trimmomatic_reads trimmomatic_adapter_file trimmomatic_extra_params trimmomatic_cpus')
    preprocessings.append(preps)

    ## COMPUTE STATISTICS ON PREPROCESSED READS
    for f in itertools.chain(*preprocessings):
        read_statistics_readset = File(f).path
        if not os.path.isabs(read_statistics_readset):
            read_statistics_readset = '#'+read_statistics_readset
        preprocessing_stats.append(SConscript(os.path.join(preprocess_dir, 'junk2_read_statistics'), 
                                              src_dir = SRC_DIR, 
                                              variant_dir = preprocess_dir, duplicate = 0, 
                                              exports = 'env read_statistics_readset')
                                  )

else:
    ## in case of no preprocessor specified or choice not available, just return the raw reads
    preprocessings.append([File(f) for f in READS])

preprocessed_files = preprocessings

Clean('.', preprocess_dir)
Return('preprocessed_files')
